#!/usr/bin/env node
/**
 * xloger-filter command-line interface
 */

var pwd = __dirname
,	net = require('net')
,	os = require('os')
,	fs = require("fs")
,	path = require('path')
,	program  = require('commander')
,	jsonfile = require('jsonfile')
,	defs = require("../defaults.json")
,	pkg	 = require("../package")
,	execSync = require('child_process').execSync
,	configloader	= require('../server/lib/configloader')
,   winston = require("winston")
,   moment = require("moment")
;



var	app_script = path.join(pwd, "../xloger.js");

// assign the version from package.json
program.version(pkg.version);

// load the user config file which exists.
var config = configloader.load();

program
    .option('-H, --host', 'XLogerServer Host. ['+config.filter_broker.host+']', config.filter_broker.host)
    .option('-P, --port', 'XLogerServer Socket Port. ['+config.filter_broker.port+']', config.filter_broker.port)
    .option('-B, --backend', 'broke file to store filter data. ['+config.filter_broker.backend+']', config.filter_broker.backend)
    .option('-L, --level', 'Logger level. ['+config.filter_broker.log_level+']', config.filter_broker.log_level)
    .parse(process.argv);

program.host = program.host || config.filter_broker.host;
program.port = program.port || config.filter_broker.port;
program.backend = program.backend || config.filter_broker.backend;
program.level = program.level || config.filter_broker.log_level;


const logFormat = winston.format.printf(({ level, message, label, timestamp }) => {
    timestamp = moment(timestamp).format("YYYY-MM-DD HH:mm:ss.SSS");
    level = level.toUpperCase();
    return `${timestamp} [${level}]: ${message}`;
});

var logger = winston.createLogger({
  level: program.level,
  format: winston.format.combine(
    winston.format.label({ label: '' }),
    winston.format.timestamp(),
    logFormat
  ),
  transports: [
    new winston.transports.Console()
  ]
});

// logger.format = function(level, date, message) {
//     date = moment(date).format('YYYY-MM-DD HH:mm:ss.SSS');
//     return date +" ["+level.toUpperCase()+"]" + message;
// };
// logger.setLevel(program.level);

var Dispatch = {
    filter: function(data){
        if(program.backend.startsWith("file://")){
            try{
                var filename = program.backend.substr(7);
                var filter_str = JSON.stringify(data);
                fs.writeFile(filename, filter_str, {flag:"w+"}, (err) => {
                    if (err) throw err;
                    logger.info("Filter Updated: " + filter_str);
                });
            }catch(e){
                logger.error("Failed to Write Xloger backend: "+ e.message);
            }
        }
    }
};


function start(){
    var client= new net.Socket();
    //创建socket客户端
    client.setEncoding('binary');
    //连接到服务端
    logger.info("Connecting "+[program.host, program.port].join(":"));
    client.connect(program.port, program.host, function(){
        // 注册filter客户端
        client.write(JSON.stringify({action:"register", data:{duplex:true, reciever:true}})+"\n");
    });

    //得到服务端返回来的数据
    client.on('data',function(data){
        try{
            data = JSON.parse(data);
            var action = data.action;
            data = data.data
            if(!action || !data){ 
                logger.error("Invalid data recieved.");
                return;
            }
            Dispatch[action] && Dispatch[action](data);
        }catch(e){
            logger.error(e);
            return;
        }
    });

    client.on('error',function(error){
         //错误出现之后关闭连接
        logger.error(""+error);
        reconnect();
    });
    client.on('close',function(){
        //正常关闭连接
        logger.log('Connection closed');
        reconnect();
    });
}

var reconnect_tm = null;


function reconnect(){
    reconnect_tm && clearTimeout(reconnect_tm);
    reconnect_tm = setTimeout(()=>{
        start();
    }, 3000);
}

start();

